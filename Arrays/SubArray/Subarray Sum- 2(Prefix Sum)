// Second approach to find out the largest sum of the subarray by - Prefix Sum approach

int prefixSumOfSubArray(int arr[], int n) {

    int Prefix_Sum[100] = {0};

    Prefix_Sum[0] = arr[0];

    for(int i=1; i<n; i++){

        Prefix_Sum[i] = Prefix_Sum[i-1] + arr[i]; }  

    int largest_sum = 0;

    for(int i=0; i<n; i++){

        int subarray_sum =0;

        for(int j=i; j<n; j++){

          subarray_sum = i>0 ? Prefix_Sum[j] - Prefix_Sum[i-1] : Prefix_Sum[j];  // Whenever it is the sum of the subarray from the index 0 (i=0) then, it will be equal th Prefix_Sum[j]

          largest_sum = max(largest_sum, subarray_sum);

        }  
        
      }

    return largest_sum;
    
}

int main() 

{

int arr[] = {-2,3,4,-1,5,-12,6,1,3};

int n = sizeof(arr)/sizeof(int);

for(int i=0; i<n; i++){

    cout<<arr[i]<<" ";

}

cout<<endl;

cout<<prefixSumOfSubArray(arr, n);

    return 0;

}
